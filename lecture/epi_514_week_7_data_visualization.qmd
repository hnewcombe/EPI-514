---
title: "Data Visualization"
subtitle: "EPI 514 2024 Sp"
author: "Julie Kim"
date: "`r Sys.Date()`"
format:
  revealjs: 
    theme: mytheme.scss
    scrollable: true
    auto-stretch: false
editor: visual
---

## Agenda

-   Principles of data visualization

-   Introduction to `ggplot2` package

-   Exercise using `ggplot2` package

-   Poster design

## Principles of data visualization

Five principles of scientific visualization laid out by Edward Tufte (1983)

::: incremental
-   Avoid chartjunk

-   Maximize data, minimize ink and space

-   Avoid distortions, minimize lie factors

-   Show the data and facilitate comparison

-   Small multiples or repetitions of basic design
:::

## Principles of data visualization

My advice:

::: incremental
-   Be NICE to your viewers - never assume people will know what you're trying to show.

    -   ALWAYS include axis titles in plain text (not variable name) and it's scale

    -   Include detailed captions - captions should be self-explanatory

-   Think about the morale of the story before you plot.

    -   Many journals only allow 4-6 tables + figures in the main text - be strategic about what you want to show.

-   Visualization is a way of simplifying

    -   While some levels of granularity are important for readers to know, figure should be understandable.
:::

## Introduction to ggplot2 package

::: incremental
-   Popular R package for data visualization, particularly well-known for its implementation of the "Grammar of Graphics."

-   Allows layering of plots

-   High formatting flexibility

    -   which also means lots of chances to go wrong

-   WIDE variety of visualization options (from scatter plots to maps and 3D plots)
:::

```{r}
knitr::opts_chunk$set(echo = T, include = T, 
                      fig.pos = "bottom", fig.align = "center",fig.class="figure-bottom")
```

## Installing and loading ggplot2

-   Installation

```{r, eval = F}
if (!require(ggplot2) install.packages('ggplot2'))
```

-   Load package

```{r, eval = F}
library(ggplot2)
```

-   `ggplot2` is part of `tidyverse` package

```{r, eval = F}
library(tidyverse)
```

## Basic syntax of `ggplot2`

```{r, eval = F}
ggplot(data = your_data, aes(x = x_axis_variable, y = y_axis_variable))+
  geom_point(size = size_of_the_point, col = "goldenrod")
```

Arguments that are needed:

::: panel-tabset
### data

-   `data`: data to visualize

### mapping

-   `mapping`: takes `aes` (short for aesthetics)
    -   arguments that goes into `aes` - whatever you can specify with variables in your data

        -   x-axis, y-axis : required most of the times

        -   color/fill: only if you're using variable to specify (color for points, fill for area)

        -   xmin, xmax, ymin, ymax: if you're specifying area

        -   and many other required and optional arguments specific for type (`geom`)

### geom

-   `geom`: short for geometry - specify type of plot

    -   e.g. `geom_point` for scatter plot, `geom_line` for line plots, `geom_histogram` for historgram
    -   Different geometry components require different argument
        -   e.g. `geom_ribbon` allows you to plot area - this requires (`xmin` and `xmax` or `ymin` and `ymax`) \`\`
:::

## Example - Loading data

Let's dive directly into some examples. We will use out data after cleaning from the individual assignments for this exercise.

\bigskip

```{r, message = F, warning = T}
library(tidyverse)
library(ggpubr)

brfss <- read_csv("/Users/sojink/Documents/GitHub/epi_514_data_viz/data/individualhw_post.csv") 
 # Change directory and filename to your choice
```

## Plotting - Histogram

-   Say we want to look at the distribution of `avedrnk3` variable in our data.
-   Do you see any problem here?

```{r}
ggplot(data = brfss, aes(x = avedrnk3))+
  geom_histogram()
```

## Plotting - Histogram

-   Many of us might know what `avedrnk3` means, but your readers/preceptors don't know what it means.

-   We will specify axis titles using `labs` layer.

::: panel-tabset
### Option 1

-   If you put `data` and `mapping` arguments, it will automatically inherit to your geometry layer (`geom_histogram` in this case)

```{r}
ggplot(data = brfss, mapping = aes(x = avedrnk3))+
  geom_histogram()+
  labs(x = "Number of drinks per day", y = "Count of individuals", 
       title = "Distribution of average alcoholic drinks per day (on days when drank) in past 30", subtitle = "Source: BRFSS 2021")
```

### Option 2

-   Both `data` and `mapping` arguments can go into geometry argument (`geom_histogram` in this case) too
    -   But note that this will only apply to the geometry you're specifying (more examples coming)

```{r, eval = F}
ggplot()+
  geom_histogram(data = brfss, mapping = aes(x = avedrnk3))+
  labs(x = "Number of drinks per day", y = "Count of individuals", 
       title = "Distribution of alcohol days", subtitle = "Source: BRFSS 2021")
```
:::

## Plotting - Histogram

-   We need to count the number of rectangles to know days between 0 and 20.

```{r}
ggplot()+
  geom_histogram(data = brfss, mapping = aes(x = avedrnk3))+
  labs(x = "Number of drinks per day", y = "Count of individuals", 
       title = "Distribution of alcohol days", subtitle = "Source: BRFSS 2021")+
  scale_x_continuous(breaks = seq(0, 80, 5))+
  scale_y_continuous(breaks = seq(0, 90000, 10000))
```

## Plotting - Scatter

-   Now, we will start looking at relationship between variables.

-   Say we want to look at the relationship between `avedrnk3` and `marijan1`.

::: incremental
-   Any problems here?
:::

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = alcday30, y = marijan1))+
  geom_point()+
  labs(x = "Average alcoholic drinks per day ", y = "Days of Marijuana use")
```

## Plotting - Scatter

-   After looking at this plot, you start wondering how this relationship differs between male and female.

-   One option of doing this could be creating the same plot but separately for male and female.

-   To do this, we can add `facet_wrap` layer on top of it.

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = alcday30, y = marijan1))+
  geom_point()+
  labs(x = "Average alcoholic drinks per day ", y = "Days of Marijuana use")+
  facet_wrap(~sexvar)
```

## Plotting - Scatter

-   Now you wonder how old are they?

-   One option to do this could be repeating faceting but also by age.

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = alcday30, y = marijan1))+
  geom_point()+
  labs(x = "Average alcoholic drinks per day ", y = "Days of Marijuana use")+
  facet_wrap(sexvar~age_g, ncol = 6)
```

## Plotting - Scatter

-   Now you wonder how old are they?

-   Another option could be using the color instead of creating 12 panes of plots.

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = alcday30, y = marijan1, col = age_g))+
  geom_point()+
  labs(x = "Average alcoholic drinks per day ", y = "Days of Marijuana use")+
  facet_wrap(~sexvar)
```

## Plotting - Scatter

-   If the journal your submitting to required black/white-only figures, you can do this using the shape of the points instead of colors.

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = alcday30, y = marijan1, shape = age_g))+
  geom_point()+
  labs(x = "Average number of drinking days", y = "Marijuana use")+
  facet_wrap(~sexvar)
```

## Plotting - Scatter

-   One last thing - it's actually pretty difficult to read the axis titles and texts because the font size is too small.

```{r, message = F, warning = T}
ggplot(data = brfss, mapping = aes(x = avedrnk3, y = marijan1, shape = age_g))+ 
  geom_point()+ labs(x = "Average number of drinking days", y = "Marijuana use")+ 
  facet_wrap(~sexvar)+
  theme(axis.title = element_text(size = 18),
        axis.text = element_text(size = 15), 
        strip.text = element_text(size = 15)) # for facet titles
```

-   Which one do you like the most?

## Plotting - Line

-   Use `geom_line()` instead of `geom_point()` for line plots.

-   Helpful for visualizing time-trends or relationships.

-   Example:

```{r, message = F, warning = T, eval = F}

ggplot(data = brfss, mapping = aes(x = avedrnk3, y = marijan1, shape = age_g))+ 
  geom_line()+ 
  labs(x = "Average number of drinking days", y = "Marijuana use")+ 
  facet_wrap(~sexvar)+
  theme(axis.title = element_text(size = 18),
        axis.text = element_text(size = 15), 
        strip.text = element_text(size = 15)) # for facet titles
```

## Plotting - Bars

-   Histogram is one type of bar graph that shows frequency of observations

-   Bar graph are especially helpful for binary/categorical variables.

    -   Scatter and line plots might not work well for categorical variables.

-   What is the distribution of race by gender?

::: panel-tabset
### Stacking

-   By default, `geom_bar` would set `position = 'stack'`:

```{r}
ggplot(brfss)+
  geom_bar(aes(x = sexvar, fill = imprace))+
  labs(x = "Sex", y = "Count")
```

### Dodging

-   We can also put it side-by-side:

```{r}
ggplot(brfss)+
  geom_bar(aes(x = sexvar, fill = imprace),
           position = 'dodge')+
  labs(x = "Sex", y = "Count")
```
:::

## Data wrangling and visualization

-   One advantage of `ggplot2` is that it's highly flexible.

-   You can directly plot wrangled data without having to save it to another object.

-   In this example, we will visualize the proportion of race (`imprace`) in each sex (`sexvar`).

\bigskip

-   First, wrangle our individual-level data to show proportion of each race by sex.

```{r, warning = F, message = F}
brfss%>%
  group_by(sexvar, imprace)%>%
  summarise(num = n())%>% # calculate count by sex and race
  ungroup()%>%
  group_by(sexvar)%>%
  mutate(denom = sum(num), # calculate count for all race by sex
         proportion = num/denom)%>%
  knitr::kable()
```

-   Then, we use information from wrangled data for ggplot.

-   Note that we're using `stat = 'identity'` so that we're plotting the value of a variable, instead of count of rows in the data.

```{r, message = F, warning = F}
brfss%>%
  group_by(sexvar, imprace)%>%
  summarise(num = n())%>% # calculate count by sex and race
  ungroup()%>%
  group_by(sexvar)%>%
  mutate(denom = sum(num), # calculate count for all race by sex
         proportion = num/denom)%>%
  
  ggplot()+
  geom_bar(aes(x = sexvar, y = proportion, fill = imprace), stat = 'identity')
```

## Plotting - Figure formatting

-   You may now want to polish your design a little bit.

-   There are A LOT of formatting that needs to/can happen, but the important thing is that the purpose of plotting is to facilitate communication.

    -   No shortcut: Trial-and-error and exposing yourself to various ways of plotting are really the keys to become proficient.

-   Which one makes more sense?

::: panel-tabset
### Pastel2

```{r}
ggplot(brfss)+
  geom_bar(aes(x = sexvar, fill = imprace), colour = 'grey30')+
  labs(x = "Sex", y = "Count", title = "Option 1")+
  scale_fill_brewer(palette = 'Pastel2', name = "Race")+
  theme_bw()+
  theme(legend.position = 'bottom')
```

### Blues

```{r}
ggplot(brfss)+
  geom_bar(aes(x = sexvar, fill = imprace), colour = 'grey30')+
  labs(x = "Sex", y = "Count", title = "Option 2")+
  scale_fill_brewer(palette = 'Blues', name = "Race")+
  theme_bw()+
  theme(legend.position = 'bottom')
```
:::

## Plotting - Figure formatting

-   Note that your upper layer will automatically override decisions.

```{r}
ggplot(brfss)+
  geom_bar(aes(x = sexvar, fill = imprace), colour = 'grey30')+
  labs(x = "Sex", y = "Count")+
  scale_fill_brewer(palette = 'Blues', name = "Race")+
  scale_fill_brewer(palette = 'Pastel2', name = "Race")+
  theme_bw()+
  theme(legend.position = 'bottom')
```

## Other considerations

::: incremental
-   Make sure you use color-blind friendly palette when using multiple colors.

    -   Estimates suggest that red/green color blindness affects approximately 8% of males and around 0.5% of females of Northern European descent.

-   Colors on other screens (esp. projectors!!) can look different than your laptop screen:

    -   Make sure you have enough contrast between colors so that the audience can still detect the difference even if the color slightly fades out
:::

## Useful resources

::: incremental
-   CS&SS 569 Visualizing Data and Models

    -   Course website has great learning materials and practice sets
    -   [Link to website](https://faculty.washington.edu/cadolph/index.php?page=22)

-   ggplot2 package document: [link](https://cran.r-project.org/web/packages/ggplot2/ggplot2.pdf)

-   ggplot2 cheatsheet: [link](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)

-   Stackoverflow

-   ChatGPT
:::

## Questions?
